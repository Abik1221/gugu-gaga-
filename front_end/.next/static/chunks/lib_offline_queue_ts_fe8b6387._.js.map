{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/HP/gugu-gaga-/front_end/lib/offline/queue.ts"],"sourcesContent":["import { openDB, type DBSchema, type IDBPDatabase } from \"idb\";\n\nconst DB_NAME = \"zemen-offline\";\nconst STORE_NAME = \"pending_requests\";\n\ninterface OfflineDbSchema extends DBSchema {\n  [STORE_NAME]: {\n    key: string;\n    value: OfflineRequestRecord;\n    indexes: { \"by-createdAt\": number };\n  };\n}\n\nexport async function queueRequest(\n  path: string,\n  init: RequestInit = {},\n  options: QueueRequestOptions = {}\n): Promise<OfflineRequestRecord> {\n  const headersArray = init.headers\n    ? Array.from(new Headers(init.headers).entries())\n    : undefined;\n  const body = typeof init.body === \"string\" ? init.body : null;\n\n  return addOfflineRequest({\n    path,\n    method: (init.method || \"GET\").toUpperCase(),\n    body,\n    headers: headersArray ?? null,\n    requiresAuth: options.requiresAuth ?? false,\n    tenantId: options.tenantId ?? null,\n    description: options.description ?? null,\n  });\n}\n\nexport type OfflineRequestRecord = {\n  id: string;\n  path: string;\n  method: string;\n  body?: string | null;\n  requiresAuth: boolean;\n  tenantId?: string | null;\n  headers?: [string, string][] | null;\n  createdAt: number;\n  attempts: number;\n  lastError?: string | null;\n  description?: string | null;\n};\n\nexport type OfflineQueueSummary = {\n  pending: number;\n};\n\nexport type QueueRequestOptions = {\n  tenantId?: string | null;\n  requiresAuth?: boolean;\n  description?: string | null;\n};\n\nlet dbPromise: Promise<IDBPDatabase<OfflineDbSchema>> | null = null;\n\nasync function getDb(): Promise<IDBPDatabase<OfflineDbSchema>> {\n  if (typeof window === \"undefined\" || !(\"indexedDB\" in window)) {\n    throw new Error(\"IndexedDB is not available in this environment\");\n  }\n\n  if (!dbPromise) {\n    dbPromise = openDB<OfflineDbSchema>(DB_NAME, 1, {\n      upgrade(db) {\n        if (!db.objectStoreNames.contains(STORE_NAME)) {\n          const store = db.createObjectStore(STORE_NAME, { keyPath: \"id\" });\n          store.createIndex(\"by-createdAt\", \"createdAt\");\n        }\n      },\n    });\n  }\n\n  return dbPromise;\n}\n\nfunction getEventTarget(): EventTarget | null {\n  if (typeof window === \"undefined\") return null;\n  if (!(\"CustomEvent\" in window)) return null;\n  return queueEventTarget;\n}\n\nconst queueEventTarget: EventTarget | null =\n  typeof window !== \"undefined\" ? new EventTarget() : null;\n\nfunction safeRandomId() {\n  if (typeof crypto !== \"undefined\" && crypto.randomUUID) {\n    return crypto.randomUUID();\n  }\n  return `${Date.now()}-${Math.random().toString(16).slice(2)}`;\n}\n\nasync function emitQueueChange(): Promise<void> {\n  const target = getEventTarget();\n  if (!target) return;\n  try {\n    const summary = await getOfflineQueueSummary();\n    target.dispatchEvent(new CustomEvent<OfflineQueueSummary>(\"change\", { detail: summary }));\n  } catch {\n    target.dispatchEvent(\n      new CustomEvent<OfflineQueueSummary>(\"change\", { detail: { pending: 0 } })\n    );\n  }\n}\n\nexport async function addOfflineRequest(\n  data: Omit<OfflineRequestRecord, \"id\" | \"createdAt\" | \"attempts\" | \"lastError\">\n): Promise<OfflineRequestRecord> {\n  const record: OfflineRequestRecord = {\n    id: safeRandomId(),\n    createdAt: Date.now(),\n    attempts: 0,\n    lastError: null,\n    ...data,\n  };\n\n  try {\n    const db = await getDb();\n    await db.put(STORE_NAME, record);\n    await emitQueueChange();\n  } catch (error) {\n    console.error(\"Failed to add offline request\", error);\n  }\n\n  return record;\n}\n\nexport async function listOfflineRequests(): Promise<OfflineRequestRecord[]> {\n  try {\n    const db = await getDb();\n    const items = await db.getAllFromIndex(STORE_NAME, \"by-createdAt\");\n    return items.sort((a, b) => a.createdAt - b.createdAt);\n  } catch (error) {\n    console.error(\"Failed to list offline requests\", error);\n    return [];\n  }\n}\n\nexport async function removeOfflineRequest(id: string): Promise<void> {\n  try {\n    const db = await getDb();\n    await db.delete(STORE_NAME, id);\n    await emitQueueChange();\n  } catch (error) {\n    console.error(\"Failed to remove offline request\", error);\n  }\n}\n\nexport async function updateOfflineRequest(\n  record: OfflineRequestRecord\n): Promise<void> {\n  try {\n    const db = await getDb();\n    await db.put(STORE_NAME, record);\n    await emitQueueChange();\n  } catch (error) {\n    console.error(\"Failed to update offline request\", error);\n  }\n}\n\nexport async function clearOfflineRequests(): Promise<void> {\n  try {\n    const db = await getDb();\n    const tx = db.transaction(STORE_NAME, \"readwrite\");\n    await tx.store.clear();\n    await tx.done;\n    await emitQueueChange();\n  } catch (error) {\n    console.error(\"Failed to clear offline requests\", error);\n  }\n}\n\nexport async function getOfflineQueueSummary(): Promise<OfflineQueueSummary> {\n  try {\n    const db = await getDb();\n    const pending = await db.count(STORE_NAME);\n    return { pending };\n  } catch {\n    return { pending: 0 };\n  }\n}\n\nexport function subscribeToOfflineQueue(\n  callback: (summary: OfflineQueueSummary) => void\n): () => void {\n  const target = getEventTarget();\n  if (!target) {\n    callback({ pending: 0 });\n    return () => undefined;\n  }\n\n  const handler = (event: Event) => {\n    const detail = (event as CustomEvent<OfflineQueueSummary>).detail;\n    callback(detail);\n  };\n\n  target.addEventListener(\"change\", handler);\n  void getOfflineQueueSummary().then(callback).catch(() => callback({ pending: 0 }));\n\n  return () => {\n    target.removeEventListener(\"change\", handler);\n  };\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}