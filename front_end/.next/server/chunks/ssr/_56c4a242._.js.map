{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/habtamusemagn/Music/gugu-gaga-/front_end/components/ui/input.tsx"],"sourcesContent":["\"use client\";\nimport * as React from \"react\";\n\nexport interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nexport const Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className = \"\", ...props }, ref) => {\n    return (\n      <input\n        ref={ref}\n        className={\n          \"w-full border rounded px-3 py-2 text-sm outline-none focus:ring-2 focus:ring-emerald-200 focus:border-emerald-400 \" +\n          className\n        }\n        {...props}\n      />\n    );\n  }\n);\nInput.displayName = \"Input\";\n"],"names":[],"mappings":";;;;;AACA;AADA;;;AAKO,MAAM,sBAAQ,kVAAgB,CACnC,CAAC,EAAE,YAAY,EAAE,EAAE,GAAG,OAAO,EAAE;IAC7B,qBACE,6WAAC;QACC,KAAK;QACL,WACE,uHACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":["file:///home/habtamusemagn/Music/gugu-gaga-/front_end/utils/api.ts"],"sourcesContent":["export const API_BASE =\n  process.env.NEXT_PUBLIC_API_BASE || \"http://localhost:8000/api/v1\";\nexport const TENANT_HEADER =\n  process.env.NEXT_PUBLIC_TENANT_HEADER || \"X-Tenant-ID\";\n\nfunction buildHeaders(\n  initHeaders?: HeadersInit,\n  tenantId?: string\n): HeadersInit {\n  const headers: Record<string, string> = {\n    ...(initHeaders as Record<string, string>),\n  };\n  if (tenantId) headers[TENANT_HEADER] = tenantId;\n  return headers;\n}\n\nexport async function postForm<T = any>(\n  path: string,\n  data: Record<string, string>,\n  tenantId?: string\n): Promise<T> {\n  const body = new URLSearchParams(data);\n  const res = await fetch(`${API_BASE}${path}`, {\n    method: \"POST\",\n    headers: buildHeaders(\n      { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n      tenantId\n    ),\n    body,\n  });\n\n  if (!res.ok) {\n    let parsed: any = null;\n    try {\n      parsed = await res.json();\n    } catch {\n      parsed = await res.text().catch(() => null);\n    }\n\n    let msg = \"\";\n    if (!parsed) msg = `Request failed with ${res.status}`;\n    else if (typeof parsed === \"string\") msg = parsed;\n    else if (Array.isArray(parsed)) msg = parsed.join(\", \");\n    else if (parsed?.detail) msg = parsed.detail;\n    else if (parsed?.message) msg = parsed.message;\n    else if (parsed?.error) msg = parsed.error;\n    else if (parsed?.errors) {\n      msg = Object.keys(parsed.errors)\n        .map(\n          (k) =>\n            `${k}: ${\n              Array.isArray(parsed.errors[k])\n                ? parsed.errors[k].join(\", \")\n                : parsed.errors[k]\n            }`\n        )\n        .join(\" | \");\n    } else msg = JSON.stringify(parsed);\n\n    const err: any = new Error(msg || `Request failed with ${res.status}`);\n    err.status = res.status;\n    err.body = parsed;\n    console.error(\"[postForm] failed\", { path, status: res.status, parsed });\n    throw err;\n  }\n\n  return (await res.json()) as T;\n}\n\nexport async function postJSON<T = any>(\n  path: string,\n  body: any,\n  tenantId?: string\n): Promise<T> {\n  const res = await fetch(`${API_BASE}${path}`, {\n    method: \"POST\",\n    headers: buildHeaders({ \"Content-Type\": \"application/json\" }, tenantId),\n    body: JSON.stringify(body),\n  });\n\n  if (!res.ok) {\n    try {\n      const data = await res.json();\n      const msg = data?.error || data?.detail || JSON.stringify(data);\n      throw new Error(msg || `Request failed with ${res.status}`);\n    } catch {\n      const text = await res.text().catch(() => \"\");\n      throw new Error(text || `Request failed with ${res.status}`);\n    }\n  }\n\n  return (await res.json()) as T;\n}\n\nexport async function putAuthJSON<T = any>(\n  path: string,\n  bodyData: any,\n  tenantId?: string\n): Promise<T> {\n  const res = await fetch(`${API_BASE}${path}`, {\n    method: \"PUT\",\n    headers: buildHeaders({ \"Content-Type\": \"application/json\" }, tenantId),\n    body: JSON.stringify(bodyData),\n  });\n\n  if (!res.ok) {\n    try {\n      const data = await res.json();\n      const msg = data?.error || data?.detail || JSON.stringify(data);\n      throw new Error(msg || `Request failed with ${res.status}`);\n    } catch {\n      const text = await res.text().catch(() => \"\");\n      throw new Error(text || `Request failed with ${res.status}`);\n    }\n  }\n  return (await res.json()) as T;\n}\n\nexport async function postMultipart<T = any>(\n  path: string,\n  formData: FormData,\n  tenantId?: string\n): Promise<T> {\n  const res = await fetch(`${API_BASE}${path}`, {\n    method: \"POST\",\n    headers: buildHeaders(undefined, tenantId),\n    body: formData,\n  });\n\n  if (!res.ok) {\n    try {\n      const data = await res.json();\n      const msg = data?.error || data?.detail || JSON.stringify(data);\n      throw new Error(msg || `Request failed with ${res.status}`);\n    } catch {\n      throw new Error(`Request failed with ${res.status}`);\n    }\n  }\n\n  return (await res.json()) as T;\n}\n\nexport function getAccessToken(): string | null {\n  if (typeof window === \"undefined\") return null;\n  return localStorage.getItem(\"access_token\");\n}\n\nfunction getRefreshToken(): string | null {\n  if (typeof window === \"undefined\") return null;\n  return localStorage.getItem(\"refresh_token\");\n}\n\nasync function refreshTokens(): Promise<boolean> {\n  const rt = getRefreshToken();\n  if (!rt) return false;\n  const url = `${API_BASE}/api/v1/auth/refresh?refresh_token=${encodeURIComponent(\n    rt\n  )}`;\n  const res = await fetch(url, { method: \"POST\" });\n  if (!res.ok) return false;\n  try {\n    const data = (await res.json()) as {\n      access_token: string;\n      refresh_token: string;\n    };\n    if (typeof window !== \"undefined\") {\n      localStorage.setItem(\"access_token\", data.access_token);\n      localStorage.setItem(\"refresh_token\", data.refresh_token);\n    }\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nasync function authFetch(\n  path: string,\n  init?: RequestInit,\n  retry = true,\n  tenantId?: string\n): Promise<Response> {\n  const token = getAccessToken();\n  const headers: HeadersInit = buildHeaders(\n    {\n      ...(init?.headers || {}),\n      ...(token ? { Authorization: `Bearer ${token}` } : {}),\n    },\n    tenantId\n  );\n  let res = await fetch(`${API_BASE}${path}`, { ...(init || {}), headers });\n\n  if (res.status === 401 && retry) {\n    const ok = await refreshTokens();\n    if (ok) {\n      const newToken = getAccessToken();\n      const retryHeaders: HeadersInit = buildHeaders(\n        {\n          ...(init?.headers || {}),\n          ...(newToken ? { Authorization: `Bearer ${newToken}` } : {}),\n        },\n        tenantId\n      );\n      res = await fetch(`${API_BASE}${path}`, {\n        ...(init || {}),\n        headers: retryHeaders,\n      });\n    }\n  }\n\n  return res;\n}\n\nexport async function getAuthJSON<T = any>(\n  path: string,\n  tenantId?: string\n): Promise<T> {\n  const res = await authFetch(path, undefined, true, tenantId);\n  if (!res.ok) {\n    const data = await res.text().catch(() => \"\");\n    throw new Error(data || `Request failed with ${res.status}`);\n  }\n  return (await res.json()) as T;\n}\n\nexport async function postAuthJSON<T = any>(\n  path: string,\n  bodyData: any,\n  tenantId?: string\n): Promise<T> {\n  const res = await authFetch(\n    path,\n    {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(bodyData),\n    },\n    true,\n    tenantId\n  );\n\n  if (!res.ok) {\n    const data = await res.text().catch(() => \"\");\n    throw new Error(data || `Request failed with ${res.status}`);\n  }\n\n  return (await res.json()) as T;\n}\n\n// ----------------- AuthAPI -----------------\nexport const AuthAPI = {\n  registerAffiliate: (body: any) => postJSON(\"/auth/register/affiliate\", body),\n  registerPharmacy: (body: any) => postJSON(\"/auth/register/pharmacy\", body),\n\n  registerVerify: async (email: string, code: string) => {\n    try {\n      return await postForm(\"/auth/register/verify\", { email, code });\n    } catch (err: any) {\n      if (err?.status === 422) {\n        console.warn(\"[AuthAPI.registerVerify] 422, retrying with JSON\", {\n          body: err.body,\n        });\n        try {\n          return await postJSON(\"/auth/register/verify\", { email, code });\n        } catch (err2: any) {\n          const e: any = new Error(\n            err2?.message || err?.message || \"Verification failed\"\n          );\n          e.original = err;\n          e.retry = err2;\n          throw e;\n        }\n      }\n      throw err;\n    }\n  },\n\n  verifyRegistration: (email: string, code: string) =>\n    postForm(\"/auth/register/verify\", { email, code }),\n  login: (email: string, password: string, tenantId?: string) =>\n    postForm(\"/auth/login\", { username: email, password }, tenantId),\n  loginRequestCode: (email: string, password: string, tenantId?: string) =>\n    postForm(\n      \"/auth/login/request-code\",\n      { username: email, password },\n      tenantId\n    ),\n  loginVerify: (email: string, code: string, tenantId?: string) =>\n    postJSON(\"/auth/login/verify\", { email, code }, tenantId),\n  me: () => getAuthJSON(\"/auth/me\"),\n};\n\n// ----------------- AffiliateAPI -----------------\nexport const AffiliateAPI = {\n  getLinks: () => getAuthJSON(\"/affiliate/register-link\"),\n  createLink: () => getAuthJSON(\"/affiliate/register-link?create_new=true\"),\n  deactivate: (token: string) =>\n    postAuthJSON(\n      `/affiliate/links/${encodeURIComponent(token)}/deactivate`,\n      {}\n    ),\n  rotate: (token: string) =>\n    postAuthJSON(`/affiliate/links/${encodeURIComponent(token)}/rotate`, {}),\n  dashboard: () => getAuthJSON(\"/affiliate/dashboard\"),\n  payouts: (status?: string) =>\n    getAuthJSON(\n      `/affiliate/payouts${\n        status ? `?status_filter=${encodeURIComponent(status)}` : \"\"\n      }`\n    ),\n  requestPayout: (month?: string, percent = 5) =>\n    postAuthJSON(\"/affiliate/payouts/request\", { month, percent }),\n  updateProfile: (body: any) => postAuthJSON(\"/affiliate/profile\", body),\n};\n\n// ----------------- AdminAPI -----------------\nexport const AdminAPI = {\n  pharmacies: (page = 1, pageSize = 20, q?: string) =>\n    getAuthJSON(\n      `/admin/pharmacies?page=${page}&page_size=${pageSize}${\n        q ? `&q=${encodeURIComponent(q)}` : \"\"\n      }`\n    ),\n  affiliates: (page = 1, pageSize = 20, q?: string) =>\n    getAuthJSON(\n      `/admin/affiliates?page=${page}&page_size=${pageSize}${\n        q ? `&q=${encodeURIComponent(q)}` : \"\"\n      }`\n    ),\n  approvePharmacy: (tenantId: string, applicationId: number, body?: any) =>\n    postAuthJSON(\n      `/admin/pharmacies/${applicationId}/approve`,\n      body || {},\n      tenantId\n    ),\n  rejectPharmacy: (tenantId: string, applicationId: number) =>\n    postAuthJSON(`/admin/pharmacies/${applicationId}/reject`, {}, tenantId),\n  verifyPayment: (tenantId: string, code?: string | null) =>\n    postAuthJSON(`/admin/payments/verify`, { code: code || null }, tenantId),\n  rejectPayment: (tenantId: string, code?: string | null) =>\n    postAuthJSON(`/admin/payments/reject`, { code: code || null }, tenantId),\n  analyticsOverview: (days = 30) =>\n    getAuthJSON(`/admin/analytics/overview?days=${days}`),\n  approveAffiliate: (userId: number) =>\n    postAuthJSON(`/admin/affiliates/${userId}/approve`, {}),\n  rejectAffiliate: (userId: number) =>\n    postAuthJSON(`/admin/affiliates/${userId}/reject`, {}),\n};\n\n// ----------------- StaffAPI -----------------\nexport const StaffAPI = {\n  createCashier: (tenantId: string, body: any) =>\n    postAuthJSON(\"/staff\", body, tenantId),\n  list: (tenantId: string) => getAuthJSON(\"/staff\", tenantId),\n  update: (tenantId: string, userId: number, body: { is_active?: boolean }) =>\n    authFetch(\n      `/staff/${userId}`,\n      {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(body),\n      },\n      true,\n      tenantId\n    ).then(async (res) => {\n      if (!res.ok) throw new Error(await res.text());\n      return res.json();\n    }),\n  remove: (tenantId: string, userId: number) =>\n    authFetch(`/staff/${userId}`, { method: \"DELETE\" }, true, tenantId).then(\n      async (res) => {\n        if (!res.ok) throw new Error(await res.text());\n        return res.json();\n      }\n    ),\n};\n\n// ----------------- BillingAPI -----------------\nexport const BillingAPI = {\n  submitPaymentCode: (tenantId: string, code: string) =>\n    postAuthJSON(\"/billing/payment-code\", { code }, tenantId),\n};\n\n// ----------------- UploadAPI -----------------\nexport const UploadAPI = {\n  uploadKyc: async (file: File) => {\n    const fd = new FormData();\n    fd.append(\"file\", file);\n    return postMultipart(\"/uploads/kyc\", fd);\n  },\n};\n\n// ----------------- KYCAPI -----------------\nexport const KYCAPI = {\n  status: (tenantId: string) => getAuthJSON(\"/owner/kyc/status\", tenantId),\n  update: (tenantId: string, body: any) =>\n    putAuthJSON(\"/owner/kyc/status\", body, tenantId),\n};\n\n// ----------------- PharmaciesAPI -----------------\nexport const PharmaciesAPI = {\n  list: (page = 1, pageSize = 20, q?: string) =>\n    getAuthJSON(\n      `/pharmacies?page=${page}&page_size=${pageSize}${\n        q ? `&q=${encodeURIComponent(q)}` : \"\"\n      }`\n    ),\n  get: (id: number) => getAuthJSON(`/pharmacies/${id}`),\n  update: (id: number, body: { name?: string; address?: string }) =>\n    authFetch(`/pharmacies/${id}`, {\n      method: \"PATCH\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(body),\n    }).then(async (res) => {\n      if (!res.ok) throw new Error(await res.text());\n      return res.json();\n    }),\n};\n\n// ----------------- ChatAPI -----------------\nexport const ChatAPI = {\n  listThreads: (tenantId: string) => getAuthJSON(`/chat/threads`, tenantId),\n  createThread: (tenantId: string, title: string) =>\n    postAuthJSON(`/chat/threads`, { title }, tenantId),\n  listMessages: (tenantId: string, threadId: number) =>\n    getAuthJSON(`/chat/threads/${threadId}/messages`, tenantId),\n  sendMessage: (tenantId: string, threadId: number, prompt: string) =>\n    postAuthJSON(`/chat/threads/${threadId}/messages`, { prompt }, tenantId),\n  usage: (tenantId: string, days = 30) =>\n    getAuthJSON(`/chat/usage?days=${days}`, tenantId),\n};\n\n// Other API objects (AffiliateAPI, AdminAPI, etc.) remain unchanged\n\n// export const API_BASE =\n//   process.env.NEXT_PUBLIC_API_BASE || \"http://localhost:8000/api/v1\";\n// export const TENANT_HEADER =\n//   process.env.NEXT_PUBLIC_TENANT_HEADER || \"X-Tenant-ID\";\n\n// function buildHeaders(\n//   initHeaders?: HeadersInit,\n//   tenantId?: string\n// ): HeadersInit {\n//   const headers: Record<string, string> = {\n//     ...(initHeaders as Record<string, string>),\n//   };\n//   if (tenantId) headers[TENANT_HEADER] = tenantId;\n//   return headers;\n// }\n\n// export async function putAuthJSON<T = any>(\n//   path: string,\n//   bodyData: any,\n//   tenantId?: string\n// ): Promise<T> {\n//   const res = await authFetch(\n//     path,\n//     {\n//       method: \"PUT\",\n//       headers: { \"Content-Type\": \"application/json\" },\n//       body: JSON.stringify(bodyData),\n//     },\n//     true,\n//     tenantId\n//   );\n//   if (!res.ok) {\n//     try {\n//       const data = await res.json();\n//       const msg = data?.error || data?.detail || JSON.stringify(data);\n//       throw new Error(msg || `Request failed with ${res.status}`);\n//     } catch {\n//       const text = await res.text().catch(() => \"\");\n//       throw new Error(text || `Request failed with ${res.status}`);\n//     }\n//   }\n//   return (await res.json()) as T;\n// }\n\n// export async function postForm<T = any>(\n//   path: string,\n//   data: Record<string, string>,\n//   tenantId?: string\n// ): Promise<T> {\n//   const body = new URLSearchParams(data);\n//   const res = await fetch(`${API_BASE}${path}`, {\n//     method: \"POST\",\n//     headers: buildHeaders(\n//       {\n//         \"Content-Type\": \"application/x-www-form-urlencoded\",\n//       },\n//       tenantId\n//     ),\n//     body,\n//   });\n//   if (!res.ok) {\n//     try {\n//       const data = await res.json();\n//       const msg = data?.error || data?.detail || JSON.stringify(data);\n//       throw new Error(msg || `Request failed with ${res.status}`);\n//     } catch {\n//       const text = await res.text().catch(() => \"\");\n//       throw new Error(text || `Request failed with ${res.status}`);\n//     }\n//   }\n//   return (await res.json()) as T;\n// }\n\n// export async function postJSON<T = any>(\n//   path: string,\n//   body: any,\n//   tenantId?: string\n// ): Promise<T> {\n//   const res = await fetch(`${API_BASE}${path}`, {\n//     method: \"POST\",\n//     headers: buildHeaders({ \"Content-Type\": \"application/json\" }, tenantId),\n//     body: JSON.stringify(body),\n//   });\n//   if (!res.ok) {\n//     try {\n//       const data = await res.json();\n//       const msg = data?.error || data?.detail || JSON.stringify(data);\n//       throw new Error(msg || `Request failed with ${res.status}`);\n//     } catch {\n//       const text = await res.text().catch(() => \"\");\n//       throw new Error(text || `Request failed with ${res.status}`);\n//     }\n//   }\n//   return (await res.json()) as T;\n// }\n\n// export async function postMultipart<T = any>(\n//   path: string,\n//   formData: FormData,\n//   tenantId?: string\n// ): Promise<T> {\n//   const res = await fetch(`${API_BASE}${path}`, {\n//     method: \"POST\",\n//     headers: buildHeaders(undefined, tenantId),\n//     body: formData,\n//   });\n//   if (!res.ok) {\n//     try {\n//       const data = await res.json();\n//       const msg = data?.error || data?.detail || JSON.stringify(data);\n//       throw new Error(msg || `Request failed with ${res.status}`);\n//     } catch {\n//       let message = `Request failed with ${res.status}`;\n//       throw new Error(message);\n//     }\n//   }\n//   return (await res.json()) as T;\n// }\n\n// export function getAccessToken(): string | null {\n//   if (typeof window === \"undefined\") return null;\n//   return localStorage.getItem(\"access_token\");\n// }\n\n// function getRefreshToken(): string | null {\n//   if (typeof window === \"undefined\") return null;\n//   return localStorage.getItem(\"refresh_token\");\n// }\n\n// async function refreshTokens(): Promise<boolean> {\n//   const rt = getRefreshToken();\n//   if (!rt) return false;\n//   const url = `${API_BASE}/api/v1/auth/refresh?refresh_token=${encodeURIComponent(\n//     rt\n//   )}`;\n//   const res = await fetch(url, { method: \"POST\" });\n//   if (!res.ok) return false;\n//   try {\n//     const data = (await res.json()) as {\n//       access_token: string;\n//       refresh_token: string;\n//       token_type: string;\n//       expires_in: number;\n//     };\n//     if (typeof window !== \"undefined\") {\n//       localStorage.setItem(\"access_token\", data.access_token);\n//       localStorage.setItem(\"refresh_token\", data.refresh_token);\n//     }\n//     return true;\n//   } catch {\n//     return false;\n//   }\n// }\n\n// async function authFetch(\n//   path: string,\n//   init?: RequestInit,\n//   retry = true,\n//   tenantId?: string\n// ): Promise<Response> {\n//   const token = getAccessToken();\n//   const headers: HeadersInit = buildHeaders(\n//     {\n//       ...(init?.headers || {}),\n//       ...(token ? { Authorization: `Bearer ${token}` } : {}),\n//     },\n//     tenantId\n//   );\n//   const res = await fetch(`${API_BASE}${path}`, { ...(init || {}), headers });\n//   if (res.status === 401 && retry) {\n//     const ok = await refreshTokens();\n//     if (ok) {\n//       const newToken = getAccessToken();\n//       const retryHeaders: HeadersInit = buildHeaders(\n//         {\n//           ...(init?.headers || {}),\n//           ...(newToken ? { Authorization: `Bearer ${newToken}` } : {}),\n//         },\n//         tenantId\n//       );\n//       return fetch(`${API_BASE}${path}`, {\n//         ...(init || {}),\n//         headers: retryHeaders,\n//       });\n//     }\n//   }\n//   return res;\n// }\n\n// export async function getAuthJSON<T = any>(\n//   path: string,\n//   tenantId?: string\n// ): Promise<T> {\n//   const res = await authFetch(path, undefined, true, tenantId);\n//   if (!res.ok) {\n//     try {\n//       const data = await res.json();\n//       const msg = data?.error || data?.detail || JSON.stringify(data);\n//       throw new Error(msg || `Request failed with ${res.status}`);\n//     } catch {\n//       const text = await res.text().catch(() => \"\");\n//       throw new Error(text || `Request failed with ${res.status}`);\n//     }\n//   }\n//   return (await res.json()) as T;\n// }\n\n// export async function postAuthJSON<T = any>(\n//   path: string,\n//   bodyData: any,\n//   tenantId?: string\n// ): Promise<T> {\n//   const res = await authFetch(\n//     path,\n//     {\n//       method: \"POST\",\n//       headers: { \"Content-Type\": \"application/json\" },\n//       body: JSON.stringify(bodyData),\n//     },\n//     true,\n//     tenantId\n//   );\n//   if (!res.ok) {\n//     try {\n//       const data = await res.json();\n//       const msg = data?.error || data?.detail || JSON.stringify(data);\n//       throw new Error(msg || `Request failed with ${res.status}`);\n//     } catch {\n//       const text = await res.text().catch(() => \"\");\n//       throw new Error(text || `Request failed with ${res.status}`);\n//     }\n//   }\n//   return (await res.json()) as T;\n// }\n\n// // Convenience wrappers for key flows\n// export const AuthAPI = {\n//   registerAffiliate: (body: any) => postJSON(\"/auth/register/affiliate\", body),\n//   registerPharmacy: (body: any) => postJSON(\"/auth/register/pharmacy\", body),\n//   registerVerify: (email: string, code: string) =>\n//     postForm(\"/auth/register/verify\", { email, code }),\n//   verifyRegistration: (email: string, code: string) =>\n//     postForm(\"/auth/register/verify\", { email, code }),\n//   login: (email: string, password: string, tenantId?: string) =>\n//     postForm(\"/auth/login\", { username: email, password }, tenantId),\n//   loginRequestCode: (email: string, password: string, tenantId?: string) =>\n//     postForm(\n//       \"/auth/login/request-code\",\n//       { username: email, password },\n//       tenantId\n//     ),\n//   loginVerify: (email: string, code: string, tenantId?: string) =>\n//     postJSON(\"/auth/login/verify\", { email, code }, tenantId),\n//   me: () => getAuthJSON(\"/auth/me\"),\n// };\n\n// export const AffiliateAPI = {\n//   getLinks: () => getAuthJSON(\"/affiliate/register-link\"),\n//   createLink: () => getAuthJSON(\"/affiliate/register-link?create_new=true\"),\n//   deactivate: (token: string) =>\n//     postAuthJSON(\n//       `/affiliate/links/${encodeURIComponent(token)}/deactivate`,\n//       {}\n//     ),\n//   rotate: (token: string) =>\n//     postAuthJSON(`/affiliate/links/${encodeURIComponent(token)}/rotate`, {}),\n//   dashboard: () => getAuthJSON(\"/affiliate/dashboard\"),\n//   payouts: (status?: string) =>\n//     getAuthJSON(\n//       `/affiliate/payouts${\n//         status ? `?status_filter=${encodeURIComponent(status)}` : \"\"\n//       }`\n//     ),\n//   requestPayout: (month?: string, percent = 5) =>\n//     postAuthJSON(\"/affiliate/payouts/request\", { month, percent }),\n//   updateProfile: (body: any) => postAuthJSON(\"/affiliate/profile\", body),\n// };\n\n// export const AdminAPI = {\n//   pharmacies: (page = 1, pageSize = 20, q?: string) =>\n//     getAuthJSON(\n//       `/admin/pharmacies?page=${page}&page_size=${pageSize}${\n//         q ? `&q=${encodeURIComponent(q)}` : \"\"\n//       }`\n//     ),\n//   affiliates: (page = 1, pageSize = 20, q?: string) =>\n//     getAuthJSON(\n//       `/admin/affiliates?page=${page}&page_size=${pageSize}${\n//         q ? `&q=${encodeURIComponent(q)}` : \"\"\n//       }`\n//     ),\n//   approvePharmacy: (\n//     tenantId: string,\n//     applicationId: number,\n//     body?: { issue_temp_password?: boolean; temp_password?: string }\n//   ) =>\n//     postAuthJSON(\n//       `/admin/pharmacies/${applicationId}/approve`,\n//       body || {},\n//       tenantId\n//     ),\n//   rejectPharmacy: (tenantId: string, applicationId: number) =>\n//     postAuthJSON(`/admin/pharmacies/${applicationId}/reject`, {}, tenantId),\n//   verifyPayment: (tenantId: string, code?: string | null) =>\n//     postAuthJSON(`/admin/payments/verify`, { code: code || null }, tenantId),\n//   rejectPayment: (tenantId: string, code?: string | null) =>\n//     postAuthJSON(`/admin/payments/reject`, { code: code || null }, tenantId),\n//   analyticsOverview: (days = 30) =>\n//     getAuthJSON(`/admin/analytics/overview?days=${days}`),\n//   downloadPharmacyLicense: async (applicationId: number) => {\n//     const res = await authFetch(\n//       `/admin/pharmacies/${applicationId}/license`,\n//       { method: \"GET\" },\n//       true\n//     );\n//     if (!res.ok) {\n//       const text = await res.text().catch(() => \"\");\n//       throw new Error(text || `HTTP ${res.status}`);\n//     }\n//     const blob = await res.blob();\n//     let filename = `license-${applicationId}`;\n//     const disposition = res.headers.get(\"Content-Disposition\") || \"\";\n//     const match = disposition.match(\n//       /filename\\*=UTF-8''([^;]+)|filename=\"?([^\";]+)\"?/i\n//     );\n//     const extracted = match?.[1] || match?.[2];\n//     if (extracted) {\n//       try {\n//         filename = decodeURIComponent(extracted);\n//       } catch {\n//         filename = extracted;\n//       }\n//     }\n//     const url = window.URL.createObjectURL(blob);\n//     const link = document.createElement(\"a\");\n//     link.href = url;\n//     link.download = filename;\n//     document.body.appendChild(link);\n//     link.click();\n//     document.body.removeChild(link);\n//     window.URL.revokeObjectURL(url);\n//   },\n//   approveAffiliate: (userId: number) =>\n//     postAuthJSON(`/admin/affiliates/${userId}/approve`, {}),\n//   rejectAffiliate: (userId: number) =>\n//     postAuthJSON(`/admin/affiliates/${userId}/reject`, {}),\n//   listAffiliatePayouts: (status?: string) =>\n//     getAuthJSON(\n//       `/admin/affiliate/payouts${\n//         status ? `?status=${encodeURIComponent(status)}` : \"\"\n//       }`\n//     ),\n//   markPayoutPaid: (payoutId: number) =>\n//     postAuthJSON(`/admin/affiliate/payouts/${payoutId}/mark-paid`, {}),\n//   approvePayout: (payoutId: number) =>\n//     postAuthJSON(`/admin/affiliate/payouts/${payoutId}/approve`, {}),\n//   usage: (days = 30) => getAuthJSON(`/admin/usage?days=${days}`),\n//   audit: (params?: { tenant_id?: string; action?: string; limit?: number }) =>\n//     getAuthJSON(\n//       `/admin/audit${(() => {\n//         const qs = new URLSearchParams();\n//         if (params?.tenant_id) qs.set(\"tenant_id\", params.tenant_id);\n//         if (params?.action) qs.set(\"action\", params.action);\n//         if (params?.limit) qs.set(\"limit\", String(params.limit));\n//         const s = qs.toString();\n//         return s ? `?${s}` : \"\";\n//       })()}`\n//     ),\n// };\n\n// export const StaffAPI = {\n//   createCashier: (tenantId: string, body: any) =>\n//     postAuthJSON(\"/staff\", body, tenantId),\n//   list: (tenantId: string) => getAuthJSON(\"/staff\", tenantId),\n//   update: (tenantId: string, userId: number, body: { is_active?: boolean }) =>\n//     authFetch(\n//       `/staff/${userId}`,\n//       {\n//         method: \"PATCH\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify(body),\n//       },\n//       true,\n//       tenantId\n//     ).then(async (res) => {\n//       if (!res.ok) {\n//         const t = await res.text();\n//         throw new Error(t || `HTTP ${res.status}`);\n//       }\n//       return res.json();\n//     }),\n//   remove: (tenantId: string, userId: number) =>\n//     authFetch(`/staff/${userId}`, { method: \"DELETE\" }, true, tenantId).then(\n//       async (res) => {\n//         if (!res.ok) {\n//           const t = await res.text();\n//           throw new Error(t || `HTTP ${res.status}`);\n//         }\n//         return res.json();\n//       }\n//     ),\n// };\n\n// export const BillingAPI = {\n//   submitPaymentCode: (tenantId: string, code: string) =>\n//     postAuthJSON(\"/billing/payment-code\", { code }, tenantId),\n// };\n\n// export const UploadAPI = {\n//   uploadKyc: async (\n//     file: File\n//   ): Promise<{ path: string; size: number; filename: string }> => {\n//     const fd = new FormData();\n//     fd.append(\"file\", file);\n//     return await postMultipart(`/uploads/kyc`, fd);\n//   },\n// };\n\n// export const KYCAPI = {\n//   status: (tenantId: string) => getAuthJSON(`/owner/kyc/status`, tenantId),\n//   update: (tenantId: string, body: any) =>\n//     putAuthJSON(`/owner/kyc/status`, body, tenantId),\n// };\n\n// export const PharmaciesAPI = {\n//   list: (page = 1, pageSize = 20, q?: string) =>\n//     getAuthJSON(\n//       `/pharmacies?page=${page}&page_size=${pageSize}${\n//         q ? `&q=${encodeURIComponent(q)}` : \"\"\n//       }`\n//     ),\n//   get: (id: number) => getAuthJSON(`/pharmacies/${id}`),\n//   update: (id: number, body: { name?: string; address?: string }) =>\n//     authFetch(`/pharmacies/${id}`, {\n//       method: \"PATCH\",\n//       headers: { \"Content-Type\": \"application/json\" },\n//       body: JSON.stringify(body),\n//     }).then(async (res) => {\n//       if (!res.ok) {\n//         const t = await res.text();\n//         throw new Error(t || `HTTP ${res.status}`);\n//       }\n//       return res.json();\n//     }),\n// };\n\n// export const ChatAPI = {\n//   listThreads: (tenantId: string) => getAuthJSON(`/chat/threads`, tenantId),\n//   createThread: (tenantId: string, title: string) =>\n//     postAuthJSON(`/chat/threads`, { title }, tenantId),\n//   listMessages: (tenantId: string, threadId: number) =>\n//     getAuthJSON(`/chat/threads/${threadId}/messages`, tenantId),\n//   sendMessage: (tenantId: string, threadId: number, prompt: string) =>\n//     postAuthJSON(`/chat/threads/${threadId}/messages`, { prompt }, tenantId),\n//   usage: (tenantId: string, days = 30) =>\n//     getAuthJSON(`/chat/usage?days=${days}`, tenantId),\n//   sendStream: async (\n//     tenantId: string,\n//     threadId: number,\n//     prompt: string,\n//     onEvent: (evt: { event: string; data?: any }) => void\n//   ): Promise<void> => {\n//     const res = await authFetch(\n//       `/chat/threads/${threadId}/messages/stream`,\n//       {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({ prompt }),\n//       },\n//       true,\n//       tenantId\n//     );\n//     if (!res.ok || !res.body) {\n//       const t = await res.text().catch(() => \"\");\n//       throw new Error(t || `HTTP ${res.status}`);\n//     }\n//     const reader = res.body.getReader();\n//     const decoder = new TextDecoder();\n//     let buf = \"\";\n//     while (true) {\n//       const { done, value } = await reader.read();\n//       if (done) break;\n//       buf += decoder.decode(value, { stream: true });\n//       let idx;\n//       while ((idx = buf.indexOf(\"\\n\\n\")) !== -1) {\n//         const chunk = buf.slice(0, idx).trim();\n//         buf = buf.slice(idx + 2);\n//         if (chunk.startsWith(\"data:\")) {\n//           try {\n//             const jsonStr = chunk.slice(5).trim();\n//             const obj = JSON.parse(jsonStr);\n//             onEvent(obj);\n//           } catch {}\n//         }\n//       }\n//     }\n//   },\n// };\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 868, "column": 0}, "map": {"version":3,"sources":["file:///home/habtamusemagn/Music/gugu-gaga-/front_end/app/%28auth%29/verify/page.tsx"],"sourcesContent":["\"use client\";\nimport React, { useState, useEffect } from \"react\";\nimport { useRouter, useSearchParams } from \"next/navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/components/ui/toast\";\nimport { AuthAPI } from \"@/utils/api\";\n\nexport default function VerifyRegistrationPage() {\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const { show } = useToast();\n  const [email, setEmail] = useState(\"\");\n  const [code, setCode] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState(false);\n\n  // Pre-fill email from URL params if available\n  useEffect(() => {\n    const emailParam = searchParams.get(\"email\");\n    if (emailParam) {\n      setEmail(emailParam);\n    }\n  }, [searchParams]);\n\n  async function onSubmit(e: React.FormEvent) {\n    e.preventDefault();\n    setError(null);\n    setLoading(true);\n\n    try {\n      if (!email || !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\n        throw new Error(\"Please enter a valid email address\");\n      }\n      if (!code || code.length < 4) {\n        throw new Error(\"Please enter the verification code\");\n      }\n\n      const verifyRes = await AuthAPI.registerVerify(email, code);\n      const accessToken = verifyRes?.access_token;\n      const refreshToken = verifyRes?.refresh_token;\n\n      if (accessToken) {\n        localStorage.setItem(\"access_token\", accessToken);\n      }\n      if (refreshToken) {\n        localStorage.setItem(\"refresh_token\", refreshToken);\n      } else {\n        localStorage.removeItem(\"refresh_token\");\n      }\n\n      try {\n        const me = await AuthAPI.me();\n        if (typeof window !== \"undefined\") {\n          if (me?.tenant_id) localStorage.setItem(\"tenant_id\", me.tenant_id);\n          else localStorage.removeItem(\"tenant_id\");\n        }\n      } catch (meErr) {\n        console.warn(\"[verify] unable to fetch profile after verification\", meErr);\n      }\n\n      if (!accessToken) {\n        throw new Error(\"Verification succeeded but no access token was returned\");\n      }\n      setSuccess(true);\n      show({\n        variant: \"success\",\n        title: \"Verification Successful\",\n        description:\n          \"Your account has been verified. Redirecting to your dashboard.\",\n      });\n\n      // Redirect to affiliate dashboard after a short delay\n      setTimeout(() => {\n        router.replace(\"/dashboard/affiliate\");\n      }, 2000);\n    } catch (err: any) {\n      setError(err.message || \"Verification failed\");\n      show({\n        variant: \"destructive\",\n        title: \"Verification Failed\",\n        description: err.message || \"Please check your code and try again\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  if (success) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center p-6\">\n        <div className=\"w-full max-w-sm space-y-4 text-center\">\n          <div className=\"text-emerald-600 text-5xl mb-4\">✓</div>\n          <h1 className=\"text-2xl font-semibold text-emerald-600\">\n            Account Verified!\n          </h1>\n          <p className=\"text-gray-600\">\n            Your account has been successfully verified. Redirecting you to\n            your dashboard...\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-6\">\n      <div className=\"w-full max-w-sm space-y-4\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-semibold\">Verify Your Account</h1>\n          <p className=\"text-gray-600 text-sm mt-2\">\n            Enter the verification code sent to your email to complete your\n            registration.\n          </p>\n        </div>\n\n        {error && <p className=\"text-red-600 text-sm\">{error}</p>}\n\n        <form onSubmit={onSubmit} className=\"space-y-4\">\n          <div className=\"space-y-1\">\n            <label className=\"text-sm\">Email Address</label>\n            <Input\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder=\"Enter your email\"\n              required\n              autoComplete=\"email\"\n            />\n          </div>\n\n          <div className=\"space-y-1\">\n            <label className=\"text-sm\">Verification Code</label>\n            <Input\n              type=\"text\"\n              value={code}\n              onChange={(e) => setCode(e.target.value)}\n              placeholder=\"Enter 6-digit code\"\n              required\n              autoComplete=\"one-time-code\"\n              maxLength={6}\n            />\n          </div>\n\n          <Button type=\"submit\" disabled={loading} className=\"w-full\">\n            {loading ? \"Verifying...\" : \"Verify Account\"}\n          </Button>\n        </form>\n\n        <div className=\"text-center text-sm text-gray-600\">\n          <p>Didn't receive the code?</p>\n          <p>Check your spam folder or try registering again.</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}